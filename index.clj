{:namespaces
 ({:source-url nil,
   :wiki-url "caribou.config-api.html",
   :name "caribou.config",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.db-api.html",
   :name "caribou.db",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.debug-api.html",
   :name "caribou.debug",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.logger-api.html",
   :name "caribou.logger",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.model-api.html",
   :name "caribou.model",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.util-api.html",
   :name "caribou.util",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.db.adapter-api.html",
   :name "caribou.db.adapter",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.db.adapter.h2-api.html",
   :name "caribou.db.adapter.h2",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.db.adapter.postgres-api.html",
   :name "caribou.db.adapter.postgres",
   :doc nil}),
 :vars
 ({:arglists ([db-map]),
   :name "set-db-config",
   :namespace "caribou.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.config-api.html#caribou.config/set-db-config",
   :doc
   "Accepts a map to configure the DB.  Format:\n\n:classname org.postgresql.Driver\n:subprotocol postgresql\n:host localhost\n:database caribou\n:user postgres",
   :var-type "function",
   :line 33,
   :file "src/caribou/config.clj"}
  {:arglists ([table column opts]),
   :name "add-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/add-column",
   :doc "add the given column to the table.",
   :var-type "function",
   :line 151,
   :file "src/caribou/db.clj"}
  {:arglists ([db-config new-db]),
   :name "change-db-keep-host",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/change-db-keep-host",
   :doc
   "given the current db config, change the database but keep the hostname",
   :var-type "function",
   :line 185,
   :file "src/caribou/db.clj"}
  {:arglists ([table id]),
   :name "choose",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/choose",
   :doc "pull just the record with the given id from the given table",
   :var-type "function",
   :line 116,
   :file "src/caribou/db.clj"}
  {:arglists ([pred args]),
   :name "clause",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/clause",
   :doc
   "substitute values into a string template based on numbered % parameters",
   :var-type "function",
   :line 20,
   :file "src/caribou/db.clj"}
  {:arglists ([config]),
   :name "create-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/create-database",
   :doc "create a database of the given name",
   :var-type "function",
   :line 204,
   :file "src/caribou/db.clj"}
  {:arglists ([table & fields]),
   :name "create-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/create-table",
   :doc
   "create a table with the given columns, of the format\n[:column_name :type & :extra]",
   :var-type "function",
   :line 130,
   :file "src/caribou/db.clj"}
  {:arglists ([table & where]),
   :name "delete",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/delete",
   :doc
   "delete out of the given table according to the supplied where clause",
   :var-type "function",
   :line 104,
   :file "src/caribou/db.clj"}
  {:arglists ([commands]),
   :name "do-sql",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/do-sql",
   :doc "execute arbitrary sql.  direct proxy to sql/do-commands.",
   :var-type "function",
   :line 178,
   :file "src/caribou/db.clj"}
  {:arglists ([table column]),
   :name "drop-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-column",
   :doc "remove the given column from the table.",
   :var-type "function",
   :line 172,
   :file "src/caribou/db.clj"}
  {:arglists ([config]),
   :name "drop-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-database",
   :doc "drop a database of the given config",
   :var-type "function",
   :line 192,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "drop-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-table",
   :doc "remove the given table from the database.",
   :var-type "function",
   :line 145,
   :file "src/caribou/db.clj"}
  {:arglists ([table & where]),
   :name "fetch",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/fetch",
   :doc
   "pull all items from a table according to the given conditions",
   :var-type "function",
   :line 110,
   :file "src/caribou/db.clj"}
  {:arglists ([table values]),
   :name "insert",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/insert",
   :doc "insert a row into the given table with the given values",
   :var-type "function",
   :line 70,
   :file "src/caribou/db.clj"}
  {:arglists ([q & args]),
   :name "query",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/query",
   :doc
   "make an arbitrary query, substituting in extra args as % parameters",
   :var-type "function",
   :line 37,
   :file "src/caribou/db.clj"}
  {:arglists ([config]),
   :name "rebuild-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rebuild-database",
   :doc "drop and recreate the given database",
   :var-type "function",
   :line 216,
   :file "src/caribou/db.clj"}
  {:arglists ([table column new-name]),
   :name "rename-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rename-column",
   :doc "rename a column in the given table to new-name.",
   :var-type "function",
   :line 165,
   :file "src/caribou/db.clj"}
  {:arglists ([table new-name]),
   :name "rename-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rename-table",
   :doc "change the name of a table to new-name.",
   :var-type "function",
   :line 139,
   :file "src/caribou/db.clj"}
  {:arglists ([table column default]),
   :name "set-default",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/set-default",
   :doc "sets the default for a column",
   :var-type "function",
   :line 158,
   :file "src/caribou/db.clj"}
  {:arglists ([value]),
   :name "sqlize",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/sqlize",
   :doc "process a raw value into a sql appropriate string",
   :var-type "function",
   :line 55,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "table?",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/table?",
   :doc "check to see if a table by the given name exists",
   :var-type "function",
   :line 125,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "tally",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/tally",
   :doc "return how many total records are in this table",
   :var-type "function",
   :line 234,
   :file "src/caribou/db.clj"}
  {:arglists ([table where values]),
   :name "update",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/update",
   :doc "update the given row with the given values",
   :var-type "function",
   :line 83,
   :file "src/caribou/db.clj"}
  {:arglists ([values]),
   :name "value-map",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/value-map",
   :doc
   "build a string of values fit for an insert or update statement",
   :var-type "function",
   :line 65,
   :file "src/caribou/db.clj"}
  {:arglists ([s]),
   :name "zap",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/zap",
   :doc
   "quickly sanitize a potentially dirty string in preparation for a sql query",
   :var-type "function",
   :line 12,
   :file "src/caribou/db.clj"}
  {:arglists ([x]),
   :name "debug",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/debug",
   :doc
   "Simple way to print the value of an expression while still evaluating to the\nsame thing.  Example:  (debug (inc 3)) --> 4  *prints 4*",
   :var-type "macro",
   :line 3,
   :file "src/caribou/debug.clj"}
  {:arglists ([locals form]),
   :name "eval-with-locals",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/eval-with-locals",
   :doc
   "Evals a form with given locals.  The locals should be a map of symbols to\nvalues.",
   :var-type "function",
   :line 22,
   :file "src/caribou/debug.clj"}
  {:arglists ([]),
   :name "local-bindings",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/local-bindings",
   :doc
   "Produces a map of the names of local bindings to their values.",
   :var-type "macro",
   :line 15,
   :file "src/caribou/debug.clj"}
  {:arglists ([key x]),
   :name "log",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/log",
   :doc
   "Same as debug but takes a key that illustrates what conceptual area this\nlogged information belongs to.",
   :var-type "macro",
   :line 9,
   :file "src/caribou/debug.clj"}
  {:arglists ([]),
   :name "repl",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/repl",
   :doc "Starts a REPL with the local bindings available.",
   :var-type "macro",
   :line 31,
   :file "src/caribou/debug.clj"}
  {:arglists ([msg] [msg prefix]),
   :name "debug",
   :namespace "caribou.logger",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.logger-api.html#caribou.logger/debug",
   :doc "Log a debug message (with an optional prefix)",
   :var-type "function",
   :line 4,
   :file "src/caribou/logger.clj"}
  {:arglists ([msg] [msg prefix]),
   :name "error",
   :namespace "caribou.logger",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.logger-api.html#caribou.logger/error",
   :doc "Log an error message (with an optional prefix)",
   :var-type "function",
   :line 19,
   :file "src/caribou/logger.clj"}
  {:arglists ([msg] [msg prefix]),
   :name "info",
   :namespace "caribou.logger",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.logger-api.html#caribou.logger/info",
   :doc "Log an info message (with an optional prefix)",
   :var-type "function",
   :line 9,
   :file "src/caribou/logger.clj"}
  {:arglists ([msg] [msg prefix]),
   :name "warn",
   :namespace "caribou.logger",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.logger-api.html#caribou.logger/warn",
   :doc "Log a warning message (with an optional prefix)",
   :var-type "function",
   :line 14,
   :file "src/caribou/logger.clj"}
  {:file "src/caribou/model.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/Field",
   :namespace "caribou.model",
   :line 77,
   :var-type "var",
   :doc "a protocol for expected behavior of all model fields",
   :name "Field"}
  {:arglists ([slug timings id func]),
   :name "add-hook",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/add-hook",
   :doc
   "add a hook for the given model slug for the given timing.\neach hook must have a unique id, or it overwrites the previous hook at that id.",
   :var-type "function",
   :line 1634,
   :file "src/caribou/model.clj"}
  {:arglists ([items]),
   :name "arrange-tree",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/arrange-tree",
   :doc
   "given a set of nested items, arrange them into a tree\nbased on id/parent_id relationships.",
   :var-type "function",
   :line 1880,
   :file "src/caribou/model.clj"}
  {:arglists ([asset]),
   :name "asset-dir",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/asset-dir",
   :doc "Construct the dir this asset will live in.",
   :var-type "function",
   :line 492,
   :file "src/caribou/model.clj"}
  {:arglists ([asset]),
   :name "asset-path",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/asset-path",
   :doc "Construct the path this asset will live in.",
   :var-type "function",
   :line 497,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/build-where",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this prefix opts]),
   :doc
   "creates a where clause suitable to this field from the given where map, with fields prefixed by the given prefix.",
   :name "build-where"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/cleanup-field",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this]),
   :doc "further processing on removal of field",
   :name "cleanup-field"}
  {:arglists ([slug spec] [slug spec opts]),
   :name "create",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/create",
   :doc
   "slug represents the model to be updated.\nthe spec contains all information about how to update this row,\nincluding nested specs which update across associations.\nthe only difference between a create and an update is if an id is supplied,\nhence this will automatically forward to update if it finds an id in the spec.\nthis means you can use this create method to create or update something,\nusing the presence or absence of an id to signal which operation gets triggered.",
   :var-type "function",
   :line 1772,
   :file "src/caribou/model.clj"}
  {:arglists ([name]),
   :name "create-model-table",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/create-model-table",
   :doc "create an table with the given name.",
   :var-type "function",
   :line 1648,
   :file "src/caribou/model.clj"}
  {:arglists ([f]),
   :name "db",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/db",
   :doc
   "Calls f in the connect of the current configured database connection.",
   :var-type "function",
   :line 18,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id] [slug id opts]),
   :name "descendents",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/descendents",
   :doc
   "pull up all the descendents of the item given by id\nin the nested model given by slug.",
   :var-type "function",
   :line 1858,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id]),
   :name "destroy",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/destroy",
   :doc "destroy the item of the given model with the given id.",
   :var-type "function",
   :line 1832,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/field-from",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content opts]),
   :doc "retrieves the value for this field from this content item",
   :name "field-from"}
  {:arglists ([slug opts]),
   :name "find-all",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/find-all",
   :doc
   "This function is the same as gather, but uses strings for all the options that are transformed into\nthe nested maps that gather requires.  See the various process-* functions in this same namespace.",
   :var-type "function",
   :line 1533,
   :file "src/caribou/model.clj"}
  {:arglists ([slug opts]),
   :name "find-one",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/find-one",
   :doc
   "This is the same as find-all, but returns only a single item, not a vector.",
   :var-type "function",
   :line 1542,
   :file "src/caribou/model.clj"}
  {:arglists ([model opts]),
   :name "form-uberquery",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/form-uberquery",
   :doc
   "Given the model and map of opts, construct the corresponding uberquery (but don't call it!)",
   :var-type "function",
   :line 1369,
   :file "src/caribou/model.clj"}
  {:arglists ([date]),
   :name "format-date",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/format-date",
   :doc
   "given a date object, return a string representing the canonical format for that date",
   :var-type "function",
   :line 24,
   :file "src/caribou/model.clj"}
  {:arglists ([model content opts]),
   :name "from",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/from",
   :doc
   "takes a model and a raw db row and converts it into a full\ncontent representation as specified by the supplied opts.\nsome opts that are supported:\n  include - a nested hash of association includes.  if a key matches\n  the name of an association any content associated to this item through\n  that association will be inserted under that key.",
   :var-type "function",
   :line 668,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix fibers opts]),
   :name "fusion",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/fusion",
   :doc
   "Takes the results of the uberquery, which could have a map for each item associated to a given\npiece of content, and fuses them into a single nested map representing that content.",
   :var-type "function",
   :line 1404,
   :file "src/caribou/model.clj"}
  {:arglists ([slug opts]),
   :name "gather",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/gather",
   :doc
   "The main function to retrieve instances of a model given by the slug.\nThe possible keys in the opts map are:\n  :include - a nested map of associated content to include with the found instances.\n  :where - a nested map of conditions given to constrain the results found, which could include associated content.\n  :order - a nested map of ordering statements which may or may not be across associations.\n  :limit - The number of primary results to return (the number of associated instances given by the :include\n           option are not limited).\n  :offset - how many records into the result set are returned.\n\nExample:  (gather :model {:include {:fields {:link {}}}\n                          :where {:fields {:slug \"name\"}}\n                          :order {:slug :asc}\n                          :limit 10 :offset 3})\n  --> returns 10 models and all their associated fields (and those fields' links if they exist) who have a\n      field with the slug of 'name', ordered by the model slug and offset by 3.",
   :var-type "function",
   :line 1446,
   :file "src/caribou/model.clj"}
  {:arglists ([basis]),
   :name "generate",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/generate",
   :doc
   "Given a map of field generator functions, create a new map that has a value in each key\ngiven by the field generator for that key.",
   :var-type "function",
   :line 1420,
   :file "src/caribou/model.clj"}
  {:arglists ([slug n]),
   :name "generate-model",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/generate-model",
   :doc
   "Given a slug and a number n, generate that number of instances of the model given by that slug.",
   :var-type "function",
   :line 1433,
   :file "src/caribou/model.clj"}
  {:arglists ([slug opts]),
   :name "impose",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/impose",
   :doc
   "impose is identical to pick except that if the record with the given :where conditions is not found,\nit is created according to that :where map.",
   :var-type "function",
   :line 1472,
   :file "src/caribou/model.clj"}
  {:arglists ([model]),
   :name "invoke-model",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/invoke-model",
   :doc
   "translates a row from the model table into a nested hash with references\nto its fields in a hash with keys being the field slugs\nand vals being the field invoked as a Field protocol record.",
   :var-type "function",
   :line 1746,
   :file "src/caribou/model.clj"}
  {:arglists ([]),
   :name "invoke-models",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/invoke-models",
   :doc
   "call to populate the application model cache in model/models.\n(otherwise we hit the db all the time with model and field selects)\nthis also means if a model or field is changed in any way that model will\nhave to be reinvoked to reflect the current state.",
   :var-type "function",
   :line 1756,
   :file "src/caribou/model.clj"}
  {:arglists ([a b]),
   :name "join-table-name",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/join-table-name",
   :doc "construct a join table name out of two link names",
   :var-type "function",
   :line 1042,
   :file "src/caribou/model.clj"}
  {:arglists ([field a b]),
   :name "link",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/link",
   :doc
   "Link two rows by the given LinkField.  This function accepts its arguments\nin order, so that 'a' is a row from the model containing the given field.",
   :var-type "function",
   :line 1066,
   :file "src/caribou/model.clj"}
  {:arglists ([field]),
   :name "link-join-name",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/link-join-name",
   :doc
   "Given a link field, return the join table name used by that link.",
   :var-type "function",
   :line 1047,
   :file "src/caribou/model.clj"}
  {:arglists ([field]),
   :name "link-keys",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/link-keys",
   :doc "Find all related keys given by this link field.",
   :var-type "function",
   :line 1055,
   :file "src/caribou/model.clj"}
  {:arglists ([row]),
   :name "make-field",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/make-field",
   :doc
   "turn a row from the field table into a full fledged Field record",
   :var-type "function",
   :line 1583,
   :file "src/caribou/model.clj"}
  {:arglists ([slug]),
   :name "make-lifecycle-hooks",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/make-lifecycle-hooks",
   :doc
   "establish the set of functions which are called throughout the lifecycle\nof all rows for a given model (slug).  the possible hook points are:\n  :before_create     -- called for create only, before the record is made\n  :after_create      -- called for create only, now the record has an id\n  :before_update     -- called for update only, before any changes are made\n  :after_update      -- called for update only, now the changes have been committed\n  :before_save       -- called for create and update\n  :after_save        -- called for create and update\n  :before_destroy    -- only called on destruction, record has not yet been removed\n  :after_destroy     -- only called on destruction, now the db has no record of it",
   :var-type "function",
   :line 1600,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-build-order",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/model-build-order",
   :doc
   "Builds out the order component of the uberquery given whatever ordering map\nis found in opts.",
   :var-type "function",
   :line 1346,
   :file "src/caribou/model.clj"}
  {:arglists ([model]),
   :name "model-generator",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/model-generator",
   :doc
   "Constructs a map of field generator functions for the given model and its fields.",
   :var-type "function",
   :line 1414,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-join-conditions",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-join-conditions",
   :doc
   "Find all necessary table joins for this query based on the arbitrary\nnesting of the include option.",
   :var-type "function",
   :line 1287,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix where limit offset]),
   :name "model-limit-offset",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-limit-offset",
   :doc
   "Determine the limit and offset component of the uberquery based on the given where condition.",
   :var-type "function",
   :line 1309,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-natural-orderings",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-natural-orderings",
   :doc
   "Find all orderings between included associations that depend on the association position column\nof the given model.",
   :var-type "function",
   :line 1331,
   :file "src/caribou/model.clj"}
  {:arglists ([model opts]),
   :name "model-order-statement",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-order-statement",
   :doc
   "Joins the natural orderings and the given orderings from the opts map and constructs\nthe order clause to ultimately be used in the uberquery.",
   :var-type "function",
   :line 1358,
   :file "src/caribou/model.clj"}
  {:arglists ([model content opts]),
   :name "model-render",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/model-render",
   :doc
   "render a piece of content according to the fields contained in the model\nand given by the supplied opts",
   :var-type "function",
   :line 1588,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-select-fields",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-select-fields",
   :doc "Build a set of select fields based on the given model.",
   :var-type "function",
   :line 1278,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-select-query",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-select-query",
   :doc
   "Build the select query for this model by the given prefix based on the\nparticular nesting of the include map.",
   :var-type "function",
   :line 1301,
   :file "src/caribou/model.clj"}
  {:arglists ([model]),
   :name "model-table-fields",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-table-fields",
   :doc "All rows in the table governed by this model.",
   :var-type "function",
   :line 1273,
   :file "src/caribou/model.clj"}
  {:arglists ([model prefix opts]),
   :name "model-where-conditions",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/model-where-conditions",
   :doc
   "Builds the where part of the uberquery given the model, prefix and given map of the\nwhere conditions.",
   :var-type "function",
   :line 1318,
   :file "src/caribou/model.clj"}
  {:arglists ([slug opts]),
   :name "pick",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/pick",
   :doc
   "pick is the same as gather, but returns only the first result, so is not a list of maps but a single map result.",
   :var-type "function",
   :line 1467,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/post-update",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content]),
   :doc
   "any processing that is required after the content is created/updated",
   :name "post-update"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/pre-destroy",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content]),
   :doc "prepare this content item for destruction",
   :name "pre-destroy"}
  {:arglists ([include]),
   :name "process-include",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/process-include",
   :doc
   "The :include option is parsed into a nested map suitable for calling by the uberquery.\nIt translates strings of the form:\n  'association.further_association,other_association'\ninto -->\n  {:association {:further_association {}} :other_association {}}",
   :var-type "function",
   :line 1494,
   :file "src/caribou/model.clj"}
  {:arglists ([order]),
   :name "process-order",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/process-order",
   :doc
   "The :order option is parsed into a nested map suitable for calling by the uberquery.\nIt translates strings of the form:\n  'fields.slug asc,position desc'\ninto -->\n  {:fields {:slug :asc} :position :desc}",
   :var-type "function",
   :line 1519,
   :file "src/caribou/model.clj"}
  {:arglists ([where]),
   :name "process-where",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/process-where",
   :doc
   "The :where option is parsed into a nested map suitable for calling by the uberquery.\nIt translates strings of the form:\n  'fields.slug=name'\ninto -->\n  {:fields {:slug \"name\"}",
   :var-type "function",
   :line 1506,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id] [slug id opts]),
   :name "progenitors",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/progenitors",
   :doc
   "if the model given by slug is nested,\nreturn a list of the item given by this id along with all of its ancestors.",
   :var-type "function",
   :line 1844,
   :file "src/caribou/model.clj"}
  {:arglists ([slug] [slug opts]),
   :name "rally",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/rally",
   :doc
   "Pull a set of content up through the model system with the given options.\nAvoids the uberquery so is considered deprecated and inferior, left here for historical reasons.",
   :var-type "function",
   :line 1797,
   :file "src/caribou/model.clj"}
  {:arglists ([date-string]),
   :name "read-date",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/read-date",
   :doc
   "Given a date string try every imaginable thing to parse it into something\nresembling a date.",
   :var-type "function",
   :line 62,
   :file "src/caribou/model.clj"}
  {:arglists ([mapping node]),
   :name "reconstruct",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/reconstruct",
   :doc
   "mapping is between parent_ids and collections which share a parent_id.\nnode is the item whose descendent tree is to be reconstructed.",
   :var-type "function",
   :line 1872,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/render",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content opts]),
   :doc "renders out a single field from this content item",
   :name "render"}
  {:arglists ([field content]),
   :name "retrieve-links",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/retrieve-links",
   :doc
   "Given a link field and a row, find all target rows linked to the given row\nby this field.",
   :var-type "function",
   :line 1089,
   :file "src/caribou/model.clj"}
  {:arglists ([slug timing env]),
   :name "run-hook",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/run-hook",
   :doc
   "run the hooks for the given model slug given by timing.\nenv contains any necessary additional information for the running of the hook",
   :var-type "function",
   :line 1625,
   :file "src/caribou/model.clj"}
  {:arglists ([field prefix opts]),
   :name "select-fields",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/select-fields",
   :doc
   "Find all necessary columns for the select query based on the given include nesting\nand fashion them into sql form.",
   :var-type "function",
   :line 124,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/setup-field",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this spec]),
   :doc "further processing on creation of field",
   :name "setup-field"}
  {:arglists ([slug n]),
   :name "spawn-model",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/spawn-model",
   :doc
   "Given a slug and a number n, actually create the given number of model instances in the db given\nby the field generators for that model.",
   :var-type "function",
   :line 1439,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/subfield-names",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this field]),
   :doc
   "the names of any additional fields added to the model\nby this field given this name",
   :name "subfield-names"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/table-additions",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this field]),
   :doc
   "the set of additions to this db table based on the given name",
   :name "table-additions"}
  {:arglists ([slug]),
   :name "table-columns",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/table-columns",
   :doc
   "Return a list of all columns for the table corresponding to this model.",
   :var-type "function",
   :line 1079,
   :file "src/caribou/model.clj"}
  {:arglists ([field]),
   :name "table-fields",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/table-fields",
   :doc
   "This is part of the Field protocol that is the same for all fields.\nReturns the set of fields that could play a role in the select. ",
   :var-type "function",
   :line 117,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/target-for",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this]),
   :doc "retrieves the model this field points to, if applicable",
   :name "target-for"}
  {:arglists ([directive find-path]),
   :name "translate-directive",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/translate-directive",
   :doc
   "Used to decompose strings into the nested maps required by the uberquery.",
   :var-type "function",
   :line 1480,
   :file "src/caribou/model.clj"}
  {:arglists ([model opts]),
   :name "uberquery",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/uberquery",
   :doc
   "The query to bind all queries.  Returns every facet of every row given an\narbitrary nesting of include relationships (also known as the uberjoin).",
   :var-type "function",
   :line 1388,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id spec] [slug id spec opts]),
   :name "update",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/update",
   :doc
   "slug represents the model to be updated.\nid is the specific row to update.\nthe spec contains all information about how to update this row,\nincluding nested specs which update across associations.",
   :var-type "function",
   :line 1810,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/update-values",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content values]),
   :doc
   "adds to the map of values that will be committed to the db for this row",
   :name "update-values"}
  {:arglists ([f form]),
   :name "postwalk",
   :namespace "caribou.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.util-api.html#caribou.util/postwalk",
   :doc "clojure.walk/postwalk that uses our walk function",
   :var-type "function",
   :line 94,
   :file "src/caribou/util.clj"}
  {:arglists ([m]),
   :name "stringify-keys",
   :namespace "caribou.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.util-api.html#caribou.util/stringify-keys",
   :doc
   "A version of clojure.walk/stringify-keys that is record-aware",
   :var-type "function",
   :line 99,
   :file "src/caribou/util.clj"}
  {:arglists ([inner outer form]),
   :name "walk",
   :namespace "caribou.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.util-api.html#caribou.util/walk",
   :doc
   "A version of clojure.walk/walk that doesn't think Records are Maps",
   :var-type "function",
   :line 81,
   :file "src/caribou/util.clj"}
  {:arglists ([config]),
   :name "adapter-for",
   :namespace "caribou.db.adapter",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db.adapter/adapter-for",
   :doc "Find the right adapter for the given database configuration.",
   :var-type "function",
   :line 6,
   :file "src/caribou/db/adapter.clj"}
  {:arglists ([table]),
   :name "h2-table?",
   :namespace "caribou.db.adapter.h2",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db.adapter.h2/h2-table?",
   :doc "Determine if the given table exists in the database.",
   :var-type "function",
   :line 28,
   :file "src/caribou/db/adapter/h2.clj"}
  {:arglists ([]),
   :name "h2-tables",
   :namespace "caribou.db.adapter.h2",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db.adapter.h2/h2-tables",
   :doc "Retrieve a list of all tables in an h2 database.",
   :var-type "function",
   :line 16,
   :file "src/caribou/db/adapter/h2.clj"}
  {:arglists ([table]),
   :name "postgres-table?",
   :namespace "caribou.db.adapter.postgres",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.db-api.html#caribou.db.adapter.postgres/postgres-table?",
   :doc "Determine if this table exists in the postgresql database.",
   :var-type "function",
   :line 40,
   :file "src/caribou/db/adapter/postgres.clj"})}
